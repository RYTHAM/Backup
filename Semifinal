package level2;

//Java program to connect n 
//ropes with minimum cost
import java.util.*;

class ConnectRopes
{
	 
static int[] joinedPipes(int input1[])
{
 // Create a priority queue
 PriorityQueue<Integer> pqqueue =
                     new PriorityQueue<Integer>();
 int result[] = new int[input1.length-1];
 // Adding items to the pQueue
 for(int i=0;i<input1.length;i++)
 {
     pqqueue.add(input1[i]);
 }

 if(pqqueue.size() == 1)
 {int resultt[] = new int[1];
 resultt[0]=0;
 return resultt;}
 // While size of priority queue 
 // is more than 1
 int i=0;
 while (pqqueue.size() > 1)
 {	
     // Extract shortest two ropes from pq
     int first = pqqueue.poll();
     int second = pqqueue.poll();
     
     result[i]= first+second;
     // Connect the ropes: update result
     // and insert the new rope to pq
     //res += first + second;
    
     pqqueue.add(first + second);
     i++;
 }

 return result;
}

//Driver program to test above function
public static void main(String args[])
{
 int len[] = { 4};
 int size = len.length;
 int a[]= joinedPipes(len);
 for(int i =0; i<a.length;i++)
  System.out.println(a[i]);
}
}
//This code is contributed by yash_pec
